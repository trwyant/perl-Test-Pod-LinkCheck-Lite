#!/usr/bin/env perl

use 5.008;

use strict;
use warnings;

use File::Spec;
use Getopt::Long 2.33 qw{ :config auto_version };
use Pod::Usage;
use Storable qw{ nstore };

our $VERSION = '0.000_01';

use constant CPAN_INDEX	=> 't/data/_cpan/Metadata';
use constant CPANPLUS_INDEX	=>
    't/data/_cpanplus/sourcefiles.s42.c42.stored';

my %opt;

GetOptions( \%opt,
    qw{ force! },
    help => sub { pod2usage( { -verbose => 2 } ) },
) or pod2usage( { -verbose => 0 } );

my %index = (
    'Acme::Vuvuzela'		=> 1,
    'CPANPLUS'			=> 1,
    'Invalid module'		=> 1,
    'Test::Pod::LinkCheck'	=> 1,
    'Test::Pod::Links'		=> 1,
    'Test::Pod::No404s'		=> 1,
);

chdir 't/data'
    or die "Unable to cd into t/data: $!";

foreach my $info (
    [ qw{ _cpan Metadata CPAN::Module } ],
    [ qw{ _cpanplus sourcefiles.s42.c42.stored _mtree } ],
) {
    my ( $dir, $fn, $key ) = @{ $info };
    -d $dir
	or mkdir $dir
	or die "Unable to mkdir $dir: $!";
    my $path = File::Spec->catfile( $dir, $fn );
    not $opt{force}
	and -e $path
	and next;
    nstore( { $key => \%index }, $path );
}

{   # Single-iteration loop
    # URLs get handled differently
    my ( $dir, $fn ) = qw{ _http status };
    -d $dir
	or mkdir $dir
	or die "Unable to mkdir $dir: $!";
    my $path = File::Spec->catfile( $dir, $fn );
    not $opt{force}
	and -e $path
	and next;
    my %status = map { $_ => 200 } qw{
	https://metacpan.org/release/Test-Pod-LinkCheck
	https://cpanmetadb.plackperl.org/
	http://rt.cpan.org
    },
    map { "https://cpanmetadb.plackperl.org/v1.0/package/$_" }
    keys %index;
    nstore( \%status, $path );
}


__END__

=head1 TITLE

make-test-data - Generate the module indices used by the various mock objects

=head1 SYNOPSIS

 tools/make-test-data
 tools/make-test-data -force
 tools/make-test-data -help
 tools/make-test-data -version

=head1 OPTIONS

=head2 -force

If this Boolean option is asserted, the test data files are generated
even if they already exist.

The default is C<-noforce>.

=head2 -help

This option displays the documentation for this script. The script then
exits.

=head2 -version

This option displays the version of this script. The script then exits.

=head1 DETAILS

This Perl script generates the module index files used by the various
mock objects. It is intended to be run from the top level of the
distribution, i.e. as F<tools/make-test-data>.

The files produced are:

=over

=item t/data/_cpan/Metadata

This is a L<CPAN|CPAN>-format metadata file containing B<only> the
module index entries necessary to run F<t/pod_file_ok.t>.

=item t/data/_cpanplus/sourcefiles.s42.c42.stored

This is a L<CPANPLUS|CPANPLUS>-format metadata file containing B<only>
the module index entries necessary to run F</pod_file_ok.t>.

=item t/data/_http/status

This is a L<Storable|Storable> C<nstore()>-format file specifying the
desired HTTP status for any web queries generated by F<t/pod_file_ok.t>.

=back

In order to get these files used, the following actions have to take
place:

=over

=item Set C<$Test::Pod::LinkCheck::Lite::DIRECTORY_LEADER to C<'_'>.

This forces VMS-style directory names for the L<CPAN|CPAN> and
L<CPANPLUS|CPANPLUS> logic.

=item Set C<$ENV{HOME}> to C<'t/data'>.

This forces the L<CPAN|CPAN> logic to look there for the C<CPAN> index.

=item Set C<$ENV{PERL5_CPANPLUS_HOME}> to C<'t/data'>.

This forces the L<CPANPLUS|CPANPLUS> logic to look there for the
C<CPANPLUS> index.

=item Set C<$Storable::VERSION> and C<$CPANPLUS::VERSION> to C<42>.

This needs to be done after L<Storable|Storable> and
L<CPANPLUS|CPANPLUS> are loaded, and is necessary because the
L<CPANPLUS|CPANPLUS> logic embeds both these versions in the name of the
metadata file.

=item C<use lib 'inc/Mock'>

This needs to be done before loading
L<Test::Pod::LinkCheck::Lite|Test::Pod::LinkCheck::Lite>, and is
necessary so that the mock version of L<HTTP::Tiny|HTTP::Tiny> will be
loaded.

=back

=head1 AUTHOR

Thomas R. Wyant, III F<wyant at cpan dot org>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2019 by Thomas R. Wyant, III

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.10.0. For more details, see the full text
of the licenses in the directory LICENSES.

This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut

# ex: set textwidth=72 :
